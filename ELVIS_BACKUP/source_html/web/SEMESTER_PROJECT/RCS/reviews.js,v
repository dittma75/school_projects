head	1.11;
access;
symbols;
locks
	dittma75:1.11; strict;
comment	@# @;


1.11
date	2014.08.07.15.58.17;	author dittma75;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.07.05.08.57;	author dittma75;	state Exp;
branches;
next	1.9;

1.9
date	2014.05.07.04.33.44;	author dittma75;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.07.04.27.52;	author dittma75;	state Exp;
branches;
next	1.7;

1.7
date	2014.05.06.20.41.24;	author dittma75;	state Exp;
branches;
next	1.6;

1.6
date	2014.05.06.14.30.32;	author dittma75;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.06.07.04.24;	author dittma75;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.06.05.51.18;	author dittma75;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.05.21.08.23;	author dittma75;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.05.00.08.00;	author dittma75;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.02.22.43.47;	author dittma75;	state Exp;
branches;
next	;


desc
@Added JavaScript that will allow a user to see one critic
review and one user review at a time, allowing him/her to
page through them one by one, forward or backward.
@


1.11
log
@Fixed a spelling error with one of the recommendation ids.
@
text
@/* Kevin Dittmar and Anthony Ratliff
 * 6 May 2014
 * reviews.js handles the JavaScript for reviews and
 * recommendations.  It analyzes the user's preferences
 * to give more accurate recommendations.
 */
var user_index = 0;
var critic_index = 0;
var original_score;
var new_value;

/* Initialize the reviews area by hiding
 * all of the reviews and showing the first
 * reviews from users and critics.  Also sets
 * the original score to the aggregate score
 * calculated by the Perl scripts.
 */
function initialize(){
    $(".user_review").hide();
    $(".critic_review").hide();
    $("#user0").show();
    $("#critic0").show();
    $(".preference").click(function() {
        calculateRecommendation();
    });
    original_score = parseFloat($("#aggregate_score").text());
    generateRecommendation();
}

/* Hide the current user review and fade into
 * the next one.
 */
function nextUserReview(){
    $("#user"+user_index).hide();
    user_index++;
    if (user_index >= $(".user_review").length){
        user_index = 0;
    }
    $("#user"+user_index).fadeIn(500);
    console.log(user_index);
}

/* Hide the current user review and fade into
 * the previous one.
 */
function lastUserReview(){
    $("#user"+user_index).hide();
    user_index--;
    if (user_index < 0){
        user_index = $(".user_review").length - 1;
    }
    $("#user"+user_index).fadeIn(500);
    console.log(user_index);
}

/* Hide the current critic review and fade into
 * the next one.
 */
function nextCriticReview(){
    $("#critic"+critic_index).hide();
    critic_index++;
    if (critic_index >= $(".critic_review").length){
        critic_index = 0;
    }
    $("#critic"+critic_index).fadeIn(500);
}

/* Hide the current critic review and fade into
 * the previous one.
 */
function lastCriticReview(){
    $("#critic"+critic_index).hide();
    critic_index--;
    if (critic_index < 0){
        critic_index = $(".critic_review").length - 1;
    }
    $("#critic"+critic_index).fadeIn(500);
}

/* Generate a recommendation based on the weighted
 * version of the score generated from data scraped
 * by the Perl scripts.
 */
function generateRecommendation(){
    $(".recommendation").hide();
    //aggregate score is a hidden value used to determine what should be displayed
    var tempValue = parseFloat($("#aggregate_score").text());
    if(tempValue > 90){
        $("#highlyRecommended").toggle();
    }
    else if(tempValue > 75){
        $("#recommended").toggle();
    }
    else if(tempValue > 50){
        $("#mildlyRecommended").toggle();
    }
    else if(tempValue > 25){
        $("#notReallyRecommended").toggle();
    }
    else if(tempValue > 0){
        $("#notRecommended").toggle();
    }
    else{
        $("#noRecommendation").toggle();
    }
}

/* Add weight to the recommendation based on the preferences
 * checked by the user.
 */
function calculateRecommendation(){
    /*Split function information:
     *http://www.w3schools.com/jsref/jsref_split.asp
     */
    var genres = $("#genres").text();
    /*Testing for undefined variable information from:
     *http://stackoverflow.com/questions/7578917/test-if-a-variable-is-defined-in-javascript
     */ 
    if(genres.indexOf("3rd Person Shooter") > -1){
        genres = genres.replace("3rd Person Shooter", "3rd-Person-Shooter");
    }
    if(typeof genres != undefined){
        genres = genres.split(" ");
        var value = 1;
        $(".preference:checked").each(function () {
    	    if($.inArray($(this).val(), genres) > -1) {
    		    value += .075;
    	    }	
        });
        /* Get the first time in the playtime table, then split the text on :
         * to seperate the hours and the minutes
         */
        var tabletime = $(".time").first().text().split(":");
   	    var finaltime = parseFloat(tabletime[0]) + parseFloat(tabletime[1])/60.0;
        /* Check to see if the longgame checkbox is checked, 
         * and the game length is greater than 30 hours
         */
        if($('.preference[value="longgame"]').prop('checked')&& 
           finaltime > 30){
            value += .075;	
        }
        //Check to see if shortgame is checked and game length is less than 5 hours
        else if($('.preference[value="shortgame"]').prop('checked') && 
                finaltime < 5) {
            value += .075;
        }
        new_value = original_score * value;
        $("#aggregate_score").html(new_value);
        generateRecommendation();	
    }
}
@


1.10
log
@Final commit.  Added headers.
@
text
@d98 1
a98 1
        $("#notReallyRecommened").toggle();
@


1.9
log
@Time preferences work.
@
text
@d3 3
a5 2
 * reviews.js handles the JavaScript for
 * reviews and recommendations.
@


1.8
log
@Added recommendation system for time preferences.
@
text
@d137 2
a138 2
        if($('.preference[value="longgame"]').prop('checked')
            && finaltime > 30){
@


1.7
log
@Formatted JavaScript and added documentation.
@
text
@d23 1
a23 1
	    calculateRecommendation();
d85 1
d88 1
a88 1
	    $("#highlyRecommended").toggle();
d91 1
a91 1
	    $("#recommended").toggle();
d94 1
a94 1
	    $("#mildlyRecommended").toggle();
d97 1
a97 1
	    $("#notReallyRecommened").toggle();
d100 1
a100 1
	    $("#notRecommended").toggle();
d119 1
a119 1
	    genres = genres.replace("3rd Person Shooter", "3rd-Person-Shooter");
d125 3
a127 3
		    if($.inArray($(this).val(), genres) > -1) {
			    value += .075;
		    }	
d129 20
a148 3
	    new_value = original_score * value;
	    $("#aggregate_score").html(new_value);
	    generateRecommendation();	
@


1.6
log
@Increased the modifiers for recommendations to make them
more viable.
@
text
@d1 5
d11 6
d29 3
d42 3
d55 3
d67 3
d79 4
d93 1
a93 1
	    $("#mildyRecommended").toggle();
d98 1
a98 1
    else {
d101 3
d106 3
@


1.5
log
@Added fade effects for paging through reviews.
@
text
@d92 1
a92 1
			    value += .05;
@


1.4
log
@Added more of the recommendation system.
@
text
@a15 1
    //alert(original_score);
d24 1
a24 1
    $("#user"+user_index).show();
d34 1
a34 1
    $("#user"+user_index).show();
d44 1
a44 1
    $("#critic"+critic_index).show();
d53 1
a53 1
    $("#critic"+critic_index).show();
d60 1
a60 1
	$("#highlyRecommended").toggle();
d63 1
a63 1
	$("#recommended").toggle();
d66 1
a66 1
	$("#mildyRecommended").toggle();
d69 1
a69 1
	$("#notReallyRecommened").toggle();
d72 1
a72 1
	$("#notRecommended").toggle();
d85 1
a85 1
	genres = genres.replace("3rd Person Shooter", "3rd-Person-Shooter");
a88 1
        //alert(genres);
d91 3
a93 3
		if($.inArray($(this).val(), genres) > -1) {
			value += .05;
		}	
d95 3
a97 4
	new_value = original_score * value;
        alert(new_value);
	$("#aggregate_score").html(new_value);
	generateRecommendation();	
@


1.3
log
@Started adding the recommendation function, but it isn't
finding the genre data even when it exists.
@
text
@d3 2
d11 6
d58 17
a74 1
    
d81 1
a81 1
    var genres = document.getElementById("genres").innerHTML;
d85 4
a88 1
    if (typeof genres != undefined){
d90 6
a95 4
        alert(genres);
        /*var value = 1;
        $( ".preferences:checked" ).each(function () {
            $(this).val(); 
d97 4
a100 1
        */
@


1.2
log
@Started recommendation function.
@
text
@d50 2
d53 17
@


1.1
log
@Initial revision
@
text
@d48 4
@
