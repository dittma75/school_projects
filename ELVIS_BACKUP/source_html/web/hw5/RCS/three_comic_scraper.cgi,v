head	1.10;
access;
symbols;
locks
	dittma75:1.10; strict;
comment	@# @;


1.10
date	2014.03.06.16.55.30;	author dittma75;	state Exp;
branches;
next	1.9;

1.9
date	2014.03.06.15.59.05;	author dittma75;	state Exp;
branches;
next	1.8;

1.8
date	2014.03.06.06.05.28;	author dittma75;	state Exp;
branches;
next	1.7;

1.7
date	2014.03.06.05.49.07;	author dittma75;	state Exp;
branches;
next	1.6;

1.6
date	2014.03.03.23.25.01;	author dittma75;	state Exp;
branches;
next	1.5;

1.5
date	2014.03.03.21.41.04;	author dittma75;	state Exp;
branches;
next	1.4;

1.4
date	2014.03.03.20.23.39;	author dittma75;	state Exp;
branches;
next	1.3;

1.3
date	2014.03.03.02.19.10;	author dittma75;	state Exp;
branches;
next	1.2;

1.2
date	2014.03.03.00.42.11;	author dittma75;	state Exp;
branches;
next	1.1;

1.1
date	2014.03.02.18.23.34;	author dittma75;	state Exp;
branches;
next	;


desc
@Initial commit of three comic scraper.
It only scrapes a Peanuts cartoon at this revision.
@


1.10
log
@Made logic cleaner and safer for scraping comics.
@
text
@#! /usr/bin/perl -w

# three_comic_scraper.cgi - demonstrate screen-scraping in Perl
# CGI Basis by D Provine
# Modified by Kevin Dittmar 2 March 2014

use strict;
use CGI;
use WWW::Mechanize;     # This is the object that gets stuff
use HTML::TokeParser;   # This is the object that parses HTML

# create new web agent and get a page
my $agent = WWW::Mechanize->new();
$agent->get("http://www.uclick.com/client/sea/pe/");

# create new HTML parser and get the content from the web agent
my $stream = HTML::TokeParser->new(\$agent->{content});

# HTML is like this (alt is spelled "atl" in the page's source code):
# <div class="columns1234">
# 	<p class="vspacing"></p><p class="vspacing"></p>
# 	<h1>Peanuts</h1>
# 	<p class="byline">By Charles M. Schultz</p>
# 	<div style="padding: 8px 0 5px 0;">
#		<img border="0" height="415" width="600" 
#			src="http://synd.imgsrv.uclick.com/comics/pe/2014/pe140302.jpg" 
#			atl="pe140302.jpg">
# 	</div>
#...
#</div>

# get the first "div" tag to set up the loop...
my $tag = $stream->get_tag("div");

# Skip divs until we get to one without an id and
# a class of columns1234.
while (!$tag->[1]{class} or 
		($tag->[1]{class} and $tag->[1]{class} ne 'columns1234')){
	$tag = $stream->get_tag("div");
}
# get the h1 tag and, subsequently, the header text:
$tag = $stream->get_tag("h1");
my $comic_title = $stream->get_trimmed_text("/h1");

# get the byline
$tag = $stream->get_tag("p");
while ($tag->[1]{class} and $tag->[1]{class} ne 'byline'){
	$tag = $stream->get_tag("p");
}

my $comic_byline = $stream->get_trimmed_text("/p");

# get the cartoon (img in next div):
$tag = $stream->get_tag("div");
my $toon = $stream->get_tag("img");

# get the comic source and alt text:
my $source = $toon->[1]{'src'};
my $alt = "Peanuts";

# get the caption of the cartoon
$tag = $stream->get_tag("div");
while (!$tag->[1]{class} or
		($tag->[1]{class} and $tag->[1]{class} ne 'caption')){
	$tag = $stream->get_tag("div");
}
my $caption = $stream->get_trimmed_text("/div");


# Generate the HTML for the header and the first comic:
my $cgi = new CGI;

print $cgi->header(-type=>'text/html', -author=>"Kevin Dittmar"),
      $cgi->start_html(-title => 'Three Comic Screen Scraper',
		-style => [{src=>'webline.css'}, {src=>'layout699-.css'},
		{src=>'layout700+.css'}]);

print $cgi->h1("$comic_title"), "\n";

print $cgi->p("$comic_byline"), "\n";

print $cgi->img({src=>$source, alt=>$alt, class=>'comic'}), "\n";

print $cgi->p($caption), "\n\n";

# now do "Doonesbury" (note: same objects re-used, no "new()" )
$agent->get("http://doonesbury.slate.com/");
$stream = HTML::TokeParser->new(\$agent->{content});

#HTML looks like this:
#<div id="mutable" style="display: none;">
#	<img alt="Doonesbury" 
#		src="http://assets.amuniversal.com/2c93f0f06fff0131ed27005056a9545d"
#		style="width: 900px;" />
#</div>

$tag = $stream->get_tag("div");
while ($tag->[1]{id} and $tag->[1]{id} ne "mutable")
{
	$tag = $stream->get_tag("div");
}

#The comic is in this div tag's img tag.
$toon = $stream->get_tag("img");

#The src is the link to the comic.
$source = $toon->[1]{'src'};
#The alt is the title of the comic series.
$alt = $toon->[1]{'alt'};
$comic_title = $alt;

print $cgi->h1("$comic_title"), "\n";

print $cgi->img({src=>$source, alt=>$alt, class=>'comic'}), "\n\n";

#Now do Garfield.

#HTML looks like this:
#<div id="comic_wrap" class="img-polaroid">
#	<a href="http://garfield.com/comic/2014-03-01" class="comic-arrow-left ">
#		<i class="fa fa-arrow-left"></i>
#	</a>
#	<a href="#" class="comic-arrow-right hidden">
#		<i class="fa fa-arrow-right"></i>
#	</a>
#	<img class="img-responsive center-block" 
#		src="http://garfield.com/uploads/strips/2014-03-02.jpg" width="900">
#</div>

$agent->get("http://garfield.com/comic/");
$stream = HTML::TokeParser->new(\$agent->{content});

#Start off div loop.
$tag = $stream->get_tag("div");

#Get the div tag with an id of "comic_wrap" and
#a class of "img-polaroid".
while (!$tag->[1]{id} or 
		($tag->[1]{id} and $tag->[1]{id} ne 'comic_wrap')){
	$tag = $stream->get_tag("div");
}

$toon = $stream->get_tag("img");

# get the source from the tag:
$source = $toon->[1]{'src'};

#Set the alt text and comic title to be the title of the comic series.
$alt = $comic_title = 'Garfield';

# add this to the CGI output
print $cgi->h1($comic_title), "\n";
print $cgi->img({src=>$source, alt=>$alt, class=>'comic'}), "\n\n";

#Information on reading a file and printing its contents from:
#http://www.cs.mcgill.ca/~abatko/computers/programming/perl/howto/open/#read_from_one_file_and_write_its_contents_into_another_file_
my $webline_path = "../resources/webline.txt";
open( FILE, "< $webline_path") or die "Can't open $webline_path.";
while( <FILE> ) {
	print;
}
close FILE;

# ALL DONE!
print $cgi->end_html, "\n";
@


1.9
log
@Changed CGI for webline to a text file for simplicity.
@
text
@d37 2
a38 2
while (($tag->[1]{id}) or
	($tag->[1]{class} and $tag->[1]{class} ne 'columns1234')){
d63 2
a64 1
while ($tag->[1]{class} and $tag->[1]{class} ne 'caption'){
d138 2
a139 2
while (($tag->[1]{id} and $tag->[1]{id} ne 'comic_wrap') or
	($tag->[1]{class} and $tag->[1]{class} ne 'img-polaroid')){
@


1.8
log
@Added author line to start_html.
@
text
@d154 8
a161 3
#Information for using system from:
#http://perldoc.perl.org/functions/system.html
system("../resources/webline.cgi");
a162 3
print $cgi->p('*Lynx and W3M work as well as expected for text-based browsers.
		They will not print the actual comics for obvious reasons, but
		they will print the alt text.');
@


1.7
log
@Made the comic webpage responsive.
@
text
@d72 1
a72 1
print $cgi->header(-type=>'text/html'),
d74 1
a74 1
	-style => [{src=>'webline.css'}, {src=>'layout699-.css'},
@


1.6
log
@Added message about Lynx and W3M compatibility.
@
text
@d74 2
a75 1
			-style => {src => 'webline.css'});
d81 1
a81 1
print $cgi->img({src=>$source, alt=>$alt}), "\n";
d113 1
a113 1
print $cgi->img({src=>$source, alt => $alt}), "\n\n";
d152 1
a152 1
print $cgi->img({src=>$source, alt=>$alt}), "\n\n";
@


1.5
log
@Added cgi-generated webline.
@
text
@d156 4
@


1.4
log
@Added webline prototype.
@
text
@d59 1
a59 1
my $alt = $toon->[1]{'alt'};
d153 3
a155 57
print '
<table id="webline">
	<tr>
		<th>Name</th>
		<th colspan="2">Valid</th>
		<th colspan="7">Tested Browsers</th>
	</tr>
	<tr>
		<td><a href="http://elvis.rowan.edu/~dittma75/" 
				title="Link to my home page"
				class="text_link">
				<img src="../resources/black_mage.png" alt=""/>
				Kevin Dittmar
			</a>
		</td>
		<!--Link as image came from 
			http://www.w3schools.com/html/tryit.asp?filename=tryhtml_imglink-->
		<td>
		 <a href="http://validator.w3.org/check/referer">
			<img src="../resources/valid-xhtml10.png"
				alt="XHTML 1.0"/>
		 </a>
		</td>
		<td>
		 <a href="http://jigsaw.w3.org/css-validator/check/referer?profile=css3">
		 <img src="../resources/vcss.gif" alt="CSS3" /></a>
		</td>

		<!--CSS to make link underline disappear came from
			http://www.w3schools.com/cssref/pr_text_text-decoration.asp-->

		<td>
			<img src="../resources/logo_IE.png"
			alt="Internet Explorer"/>
		</td>
		<td>
			<img src="../resources/logo_FF.png"
			alt="Mozilla Firefox"/>
		</td>

		<td><img src="../resources/logo_chrome.png" alt="WebKit"/></td>
		
		<td><img src="../resources/logo_opera.png" alt="Opera"/></td>

		<td>
			<img src="../resources/logo_konqueror.png"
			alt="Konqueror"/>
		</td>
		
		<td>W3M</td>
		
		<td>Lynx</td>
	</tr>
</table>
';

print CGI->redirect("../resources/webline.cgi");
@


1.3
log
@Added webline at the bottom of the page to show
tested browsers.
@
text
@d172 2
a173 1
			<img src="../resources/HTML5_Logo.png" alt="HTML5" />
d209 1
@


1.2
log
@Garfield, Doonesbury, and Peanuts comics all work.
@
text
@d3 3
a5 2
# Scrape1.cgi - demonstrate screen-scraping in Perl
# D Provine
d19 12
d32 1
a32 4
# First, get the title:
# HTML is like this: <h1>Peanuts</h1>

# get the first "div" tag to setup the loop...
a54 1

d57 1
a57 1
# get the comic:
d69 1
a69 1
# Generate a bunch of output:
d73 2
a74 1
      $cgi->start_html('Three Comic Screen Scraper');
d88 7
d106 1
a106 1
#The alt is the title of the comic.
d114 13
a126 22
# HTML is like this:
# <p class="feature_item">
#  <a href='#mutable_975106' # class='photo'>
#    <img alt="Over the Hedge" class="strip"
#         onload="Meebo(&#x27;makeSharable&#x27;,{element:this,
#         type:&#x27;image&#x27;, shadow:&#x27;none&#x27;,
#         title:&#x27;Over the Hedge&#x27;,
#         url:document.location.href,
#         tweet:&#x27;Check out Over the Hedge on GoComics&#x27;,
#         description:&#x27;Check out Over the Hedge on GoComics&#x27;})"
#
#         src="http://assets.amuniversal.com/11d899c0caf20130f0c9001dd8b71c47"
#         width="600" />
#  </a>
#  <div id='mutable_975106' style='display: none;'>
#   <img alt="12b81d00caf20130f0c9001dd8b71c47?width=900"
#        class="strip"
#        src="http://assets.amuniversal.com/12b81d00caf20130f0c9001dd8b71c47?width=900.0"/>
#  </div>
# </p>
#
# I think we want the "img" tag inside "display: none"
d131 1
d133 3
d143 1
a143 1
# get the attribute from the tag:
d145 2
d148 1
d153 54
a209 1

@


1.1
log
@Initial revision
@
text
@d64 1
a64 1
      $cgi->start_html('Peanuts Screen Scrape');
d74 2
a75 2
# now do "Over the Hedge" (note: same objects re-used, no "new()" )
$agent->get("http://www.gocomics.com/overthehedge");
d78 19
d120 2
a121 2
# Advance to the "p" tag we want:
$tag = $stream->get_tag("p");
d123 4
a126 2
while ($tag->[1]{class} and $tag->[1]{class} ne 'feature_item') {
    $tag = $stream->get_tag("p");
a128 4
# advance to the div:
$toon = $stream->get_tag("div");

# advance to the image:
d133 1
a133 1

d135 2
a136 1
print $cgi->img({src=>$source, alt=>'Over the Hedge'}), "\n\n";
@
